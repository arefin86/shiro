node Point begin
    port x Value
    port y Value
    eval update Point(x[0], y[0])
    port point Value(update[0])
end


node Arc begin
    port center Value
    port radius Value
    port startAngle Value
    port endAngle Value
    port stroke Value("0, 10, 255")
    port strokeWidth Value(2)
    eval update Arc(center[0], radius[0], startAngle[0], endAngle[0], stroke[0], strokeWidth[0])
    port arc Value(update[0])
end


node Circle begin
    port center Value
    port radius Value
    port stroke Value("0, 10, 255")
    port weight Value(2)
    eval update Circle(center[0], radius[0], stroke[0], weight[0])
    port circle Value(update[0])
end

node Background begin
    Point -> center
    Point -> cxm

    center.x(200)
    center.y(200)

    Circle -> outline
    outline.center(center.point[0])
    outline.radius(200)

     cxm.x(100)
     cxm.y(200)

     Circle -> c2
     c2.center(cxm.point[0])
     c2.radius(100)

    Point -> cxp
    cxp.x(300)
    cxp.y(200)

   Circle -> c3
   c3.center(cxp.point[0])
   c3.radius(100)
   
    Point -> p1
    p1.x(270.7)
    p1.y(270.7)

    Circle -> c4
    c4.center(p1.point[0])
    c4.radius(100)

    Point -> p2
    p2.x(129.3)
    p2.y(129.3)

   Circle -> c5
   c5.center(p2.point[0])
   c5.radius(100)

   Point -> p5
   p5.x(270.7)
   p5.y(129.3)

   Circle -> c6
   c6.center(p5.point[0])
   c6.radius(100)

   Point -> p6
   p6.y(270.7)
   p6.x(129.3)

   Circle -> c7
   c7.center(p6.point[0])
   c7.radius(100)
   
end

subjunctive node Tracings begin
     node Trinity begin
       Arc -> a
       a.radius(100)
       a.strokeWidth(3)
       a.stroke("0, 0, 0")
       a.startAngle(-30)
       a.endAngle(30)
     end
end

graph Patterns begin
   Background -> bg
   Tracings ->t

   t.active.center(bg.cxm.point[0])
   
end


state background begin
    Graph Patterns
    Tracings[Trinity]
end