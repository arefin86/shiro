/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.shirolang.interpreter;

import java.util.HashMap;
import java.util.Map;

/**
 * This class manages the names generated by the runtime
 * 
 * //TODO Adapt this class to use NameGenerators. Associate a NameGenerator
 * per type of object being named.
 * @author jeffreyguenther
 */
public class NameManager {
    private final Map<String, Integer> instanceCount;

    /**
     * Default constructor
     */
    public NameManager() {
        instanceCount = new HashMap<>();
    }
    
    /**
     * Gets the next name
     * @param type type of node to get next name of
     * @return the new name in the format <code>$type.lowercase$$counter$</code>
     * For example, if you pass "Point" and there are no instances of the point
     * yet, "point1" will be returned.
     */
    public String getNextName(String type){
        String nextName = type.toLowerCase() + incrementCount(type);
        return nextName;
    }
    
    /**
     * Gets the number of instances of a type
     *
     * @param type the type path of the node. For example a Point node
     * defined at the root, would be passed in as "Point" Warning this method
     * does not work with nested types as nested types are implemented in shiro
     * yet.
     * @return number of instance of the node. Return 0 if the node is not
     * found.
     */
    public int getNumberOfInstances(String type) {
        if (instanceCount.containsKey(type)) {
            return instanceCount.get(type);
        } else {
            return 0;
        }
    }
    
    /**
     * Sets the number of instances for a particular type
     * @param type type of object to count
     * @param number number of instances of the type
     */
    public void setInstanceCount(String type, int number){
        if(number < 0){
            throw new IllegalArgumentException("The number of instances must be positive.");
        }
        instanceCount.put(type, number);
    }
    
    /**
     * Clears all names and instance counts from the manager.
     * All instance counts are set to zero
     */
    public void reset(){
        instanceCount.clear();
    }
    
    /**
     * Increments the number of instances of the type
     * @param type type to increment
     * @return current number of instances of the type
     */
    private int incrementCount(String type){
        // get the count of instances for the passed type
        Integer count = instanceCount.get(type);
        
        // if no instances exist yet
        if(count == null){
          count = 0;   
        }
        
        count++;
        instanceCount.put(type, count);
        return count;
    }
}
