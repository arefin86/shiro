/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package shiro.definitions;

import java.util.Objects;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupFile;

/**
 * Defines an AST object for a production of a node or subjunctive node in Shiro.
 * It represents lines:
 * 
 *      Point -> p
 * and
 *      Point -> p // this creates a point.
 
 It encapsulates the INLINE comment.
 * 
 * @author jeffreyguenther
 */
public class Production implements Definition{
    private String type;
    private String instanceName;
    private Comment inlineComment;

    
    /**
     * Create a production without a comment.
     * A null comment is created.
     * @param type of the node to create
     * @param instanceName name of the instance
     */
    public Production(String type, String instanceName) {
        this(type, instanceName, null);
    }

    /**
     * Create a production
     * @param type type of the node to create
     * @param instanceName name of the instance
     * @param inlineComment the content of an INLINE comment. Do not add "//."
 This is handled automatically by the comment object created in the constructor.
     */
    public Production(String type, String instanceName, String inlineComment) {
        this.type = type;
        this.instanceName = instanceName;
        
        if(inlineComment != null){
            this.inlineComment = Comment.INLINE(inlineComment);
        }else{
            this.inlineComment = null;
        }
    }
    
    /**
     * Gets the type of the node to produce
     * @return the type of the production
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type of the production
     * @param type type of the production
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the name of the instance to be created
     * @return name of the instance to be created
     */
    public String getInstanceName() {
        return instanceName;
    }

    /**
     * Sets the name of the instance to be created
     * @param instanceName 
     */
    public void setInstanceName(String instanceName) {
        this.instanceName = instanceName;
    }

    /**
     * Gets the INLINE comment
     * @return the INLINE comment for the production
     */
    public Comment getInlineComment() {
        return inlineComment;
    }

    /**
     * Sets the INLINE comment
     * @param comment the content of the comment. Leave off the "//". For example,
     * for the comment "// make node", you would pass "make node".
     */
    public void setInlineComment(String comment ) {
        this.inlineComment = Comment.INLINE(comment);
    }

    /**
     * Creates a string with the Shiro code to represent the object.
     * The output is generated by the <code><production/code> template
     * @return a string of Shiro code to represent the production
     */
    @Override
    public String toCode() {
        STGroup group = new STGroupFile("shiro/definitions/shiro.stg");
        ST st = group.getInstanceOf("production");
        st.add("p", this);
        return st.render();
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 83 * hash + Objects.hashCode(this.type);
        hash = 83 * hash + Objects.hashCode(this.instanceName);
        hash = 83 * hash + Objects.hashCode(this.inlineComment);
        return hash;
    }

    
    /**
     * Determines if two productions are equal.
     * They are consider to be equal of they have the same type, instance name
     * and comment. The comparison of comments depends on the comments' equals
     * method.
     * @param obj object to be compared with
     * @return whether the object is equal to the production
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Production other = (Production) obj;
        if (!Objects.equals(this.type, other.type)) {
            return false;
        }
        if (!Objects.equals(this.instanceName, other.instanceName)) {
            return false;
        }
        return Objects.equals(this.inlineComment, other.inlineComment);
    }
}
